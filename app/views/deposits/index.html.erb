<div class="d-flex align-items-center pb-5">
  <h3 class='pe-3'><%= @upcoming_bookings.count %> Upcoming bookings</h3> <h5>(Next 48h)</h5>
</div>

<table class='table table-striped'>
  <thead>
    <tr>
      <th>Name</th>
      <th>Platform</th>
      <th>Dates</th>
      <th>Apartment</th>
      <th>Price</th>
      <th>ID Status</th>
      <th>Deposit Status</th>
      <th>Terms & Conditions</th>
    </tr>
  </thead>

  <tbody>
    <% @upcoming_bookings.each do |booking| %>
      <tr data-id="<%= booking.id %>">
        <td><%= link_to(booking.link_text, booking_path(booking.id)) %></td>
        <td><%= booking.channel.name %></td>
        <td><%= "#{booking.arrival} (#{distance_of_time_in_words(booking.arrival, booking.departure)})" %> </td>
        <td><%= booking.apartment.name %> </td>
        <td>£<%= "#{ number_with_precision(booking.price, precision: 2) || 'N/A'}" %></td>
        <td><%= booking.id_status %></td>
        <td><%= booking.deposit_status %></td>
        <td><%= booking.terms_status %></td>
      </tr>
    <% end %>
  </tbody>
</table>


<h3 class='py-5'>Previous bookings</h3>



<table class='table table-striped table-boredered' style='opacity:.3'>
  <thead>
    <tr>
      <th>Name</th>
      <th>Platform</th>
      <th>Dates</th>
      <th>Apartment</th>
      <th>Price</th>
      <th>ID Status</th>
      <th>Deposit Status</th>
      <th>Terms & Conditions</th>
    </tr>
  </thead>

  <tbody>
      <tbody>
    <% @previous_bookings.each do |booking| %>
      <tr data-id="<%= booking.id %>">
        <td><%= link_to(booking.link_text, booking_path(booking.id)) %></td>
        <td><%= booking.channel.name %></td>
        <td><%= "#{booking.arrival} (#{distance_of_time_in_words(booking.arrival, booking.departure)})" %> </td>
        <td><%= booking.apartment.name %> </td>
        <td>£<%= "#{ number_with_precision(booking.price, precision: 2) || 'N/A'}" %></td>
        <td><%= booking.id_status %></td>
        <td><%= booking.deposit_status %></td>
        <td><%= booking.terms_status %></td>
      </tr>
    <% end %>
  </tbody>
  </tbody>
</table>


<script>

  function buildLogsTable(arr){

    html = "<table class='table table-striped table-sm'>"
    html += "<thead><tr><th>Agent</th><th>Action</th><th>Time</th></tr></thead>"
    for (let i = 0; i < arr.length; i++) {
      const element = arr[i];
      const user = element.user;
      const action = element.action;
      const time = element.time;
      const link = element.link;

      const linkText = link ? `<a target='_blank' href='${link}'>${action}</a>` : action;

      html += `<tbody><tr><td>${user}</td><td>${linkText}</td><td>${time}</td></tr></tbody>`;
 
    }
    html += "</table>"

    return html
  }

  function formatOptions(arr) {
    return arr.reduce(function (acc, e) {
      acc[e] = e.charAt(0).toUpperCase() + e.slice(1);
      return acc;
    }, {});
  }

  function lookupIDOptions(currentStatus){
    var map = {
          'not requested': ['request', 'unnecessary'],
          'requested': ['request', 'cancel', 'unnecessary'],
          'viewed': ['request', 'cancel', 'unnecessary'],
          'uploaded': ['approve', 'reject', 'request', 'unnecessary'],
          'approved': ['request', 'unnecessary'],
          'cancelled': ['request', 'unnecessary'],
          'unnecessary': ['request'],
          'rejected': ['request', 'unnecessary']
    }
    return formatOptions(map[currentStatus.toLowerCase()]);
  }

  function lookupDepositOptions(currentStatus){
    var map = {
          'not requested': ['request', 'unnecessary'],
          'requested': ['request', 'cancel', 'unnecessary'],
          'viewed': ['request', 'cancel', 'unnecessary'],
          'paid': ['request', 'unnecessary'],
          'approved': ['request', 'unnecessary'],
          'cancelled': ['request', 'unnecessary'],
          'unnecessary': ['request'],
          'rejected': ['request', 'unnecessary']
    }
    return formatOptions(map[currentStatus.toLowerCase()]);
  }

  function lookupTermsOptions(currentStatus){
    var map = {
          'not requested': ['request', 'unnecessary'],
          'requested': ['request', 'cancel', 'unnecessary'],
          'viewed': ['request', 'cancel', 'unnecessary'],
          'signed': ['approve', 'reject', 'request', 'unnecessary'],
          'approved': ['request', 'unnecessary'],
          'cancelled': ['request', 'unnecessary'],
          'unnecessary': ['request'],
          'rejected': ['request', 'unnecessary']
    }
    return formatOptions(map[currentStatus.toLowerCase()]);
  }

  function getActionOptions(type, currentStatus){
    if(type == "id") return lookupIDOptions(currentStatus)
    else if (type == "deposit") return lookupDepositOptions(currentStatus)
    else if (type == "terms") return lookupTermsOptions(currentStatus)
  }

  document.addEventListener('DOMContentLoaded', function() {

    const tags = document.querySelectorAll(".deposit-tag, .id-tag, .terms-tag");

    tags.forEach(function(el) {
      el.addEventListener("click", function(elem) {
        const bookingId = elem.target.closest("tr").getAttribute("data-id")
        const type = elem.target.getAttribute("data-type")
        const currentStatus = elem.target.innerText
        const options = getActionOptions(type, currentStatus)
        
        if (!bookingId || !type) return;

        html = "No audit trail to show.";
        fetch("/requests?booking_id=" + bookingId + "&type=" + type).then(res => res.json())
        .then(data => {

          logs = data['logs'];
          
          if (logs.length > 0) {
            html = buildLogsTable(logs);
          }

          Swal.fire({
          title: 'Select an action',
          input: 'select',
          html: `${html}`,
          inputOptions: options,
          inputPlaceholder: 'Choose an option',
          showCancelButton: true,
          confirmButtonText: 'Submit',
          cancelButtonText: 'Cancel'
          }).then((result) => {
            if (result.isConfirmed) {
              if (result.value) {
              
                Swal.fire({
                  title: `Notes on why you have selected "${result.value}"`,
                  input: 'textarea',
                  inputPlaceholder: 'Enter your notes here',
                  showCancelButton: true
                }).then((notesResult) => {
                  if (notesResult.isConfirmed) {
                    const notes = notesResult.value;

                    // Fetch request to POST data to the server
                    fetch('/requests', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') // if using Rails for CSRF protection
                      },
                      body: JSON.stringify({
                        request_action: result.value,
                        booking_id: bookingId,
                        notes: notes,
                        request_type: type
                      })
                    }).then(response => {
                      if (response.ok) {
                        Swal.fire('Success', 'Your request has been submitted.', 'success');
                      } else {
                        Swal.fire('Error', 'There was an issue submitting your request.', 'error');
                      }
                    }).catch(error => {
                      Swal.fire('Error', 'Something went wrong.', 'error');
                    });
                  }
                });
              }
            }
          });
        });
      });
    });
  });
</script>